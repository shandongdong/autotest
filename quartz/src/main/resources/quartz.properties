#============================================================================
# 配置主要的属性
#============================================================================
org.quartz.scheduler.instanceName=quartzScheduler
# ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的）
org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.rmi.export=false
org.quartz.scheduler.rmi.proxy=false
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false
# ThreadPool 实现的类名
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程数量，同一时刻允许触发的执行Job的线程数。
# 例如：总共有10个Job，配置线程数为2，每个线程执行需要耗时2秒。那么现象为每一秒执行2个Job任务，每个job执行需要耗时2秒，等待2个job执行完之后，触发后面2个job的执行，后面两个job与前两个job相差时间为2秒。
# 可通过线程ID查看Thread.currentThread().getId()。需要注意的时，如果任务是不停歇重复执行时，当任务较多时会出现抢占CPU资源的问题，此时无法确定哪个线程会被先执行。比如有2个线程，10个任务，此时可能会出现有些任务一直在执行，有些任务永远执行不到。
org.quartz.threadPool.threadCount=2
# 线程优先级。最大10，最小1，默认5
org.quartz.threadPool.threadPriority=5
# 自创建父线程
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
# 容许的最大作业延长时间
org.quartz.jobStore.misfireThreshold=60000
# 内存存储
#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
# 数据保存方式为持久化
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题
org.quartz.jobStore.useProperties=true
# 加入集群 true 为集群 false不是集群
org.quartz.jobStore.isClustered=false
# 表的前缀
org.quartz.jobStore.tablePrefix=QRTZ_
# 数据库别名
org.quartz.jobStore.dataSource=qzDS
# JDBC驱动  Spring去管理dataSource ，这里不在配置数据源信息
# org.quartz.dataSource.qzDS.driver=com.mysql.jdbc.Driver
# org.quartz.dataSource.qzDS.URL=jdbc:mysql://localhost:3306/auto_test
# org.quartz.dataSource.qzDS.user=root
# org.quartz.dataSource.qzDS.password=123456
# org.quartz.dataSource.qzDS.maxConnection=10










