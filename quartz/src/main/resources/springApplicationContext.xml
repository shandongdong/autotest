<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- Spring 配置文件 -->

    <!-- 组件扫描 -->
    <context:component-scan base-package="com.github.shandongdong">
        <!-- 使用排除扫描，排除掉Controller包下面的注解。因为在 Spring MVC 中已经配置了DispatcherServlet.xml里扫描 Controller 注解了 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 数据源 -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 事务 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 基于注解使用事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"></tx:annotation-driven>

    <!-- Spring 整合 MyBatis -->
    <!-- Step1: SqlSession 对象的创建管理-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- MyBatis 全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- MyBatis SQL映射文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <!-- 1. Mapper接口代理实现类对象的创建 管理等
    MapperScannerConfigurer: 会为指定包下的类生成代理实现类对象并管理到IOC容器中。
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.github.shandongdong.quartz.mapper"></property>
    </bean>

    <!-- Spring 整合 Quartz -->
    <bean id="schedulerFactoryBean" name="quartzScheduler"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 配置了DataSource会读取Spring配置的数据库，不会加载quartz.properties配置的数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 获取Spring容器中的context -->
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"></property>
        <!-- 加载quartz.properties 配置文件 -->
        <property name="configLocation" value="classpath:quartz.properties"></property>
    </bean>
</beans>